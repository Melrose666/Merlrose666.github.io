{"meta":{"title":"Melrose的破烂小站","subtitle":"永远热爱","description":"","author":"fwMelrose","url":"http://melr3se.top","root":"/"},"pages":[{"title":"categories","text":"","path":"categories/index.html"},{"title":"tags\\","text":"","path":"tags/index.html"}],"posts":[{"title":"《CTF竞赛权威指南（PWN篇）整理一》","text":"源码到可执行文件过程：预处理——编译——汇编——链接 编译五个步骤：词法分析——语法分析——语义分析——中间代码生成与优化——代码生成与优化前端：与机器无关，把源程序分解成组成要素和相应的语法结构，通过结构创建源程序的中间表示，同时收集和源程序相关的信息，放到符号表中。后端：与机器相关，根据中间表示和符号表信息构造目标程序。（见书P12编译过程） gcc编译过程使用了ccl,as,collect2三个工具，ccl是编译器，将源文件.c编译为.s，（.c-.i-.s）as是汇编器，将.s汇编为.o的目标文件，collect2是链接器，是对于ld命令的封装，将运行时库（CRT）的目标文件（.o）以及所需要的动态链接库（.so）链接到可执行文件gcc默认使用动态链接 ELF是“可执行可链接格式”，分为三种类型可执行文件（.exec）：经过链接的、可执行的目标文件，（程序）可重定位文件（.rel）：编译成却未链接的目标文件，通常是.o，用于与其他目标文件进行链接以构成可执行文件或动态链接库，通常是一段位置的独立代码（PIC）共享目标文件（.dyn）：动态链接库文件，用于与其他库或可重定位文件构成新的目标文件，或者在可执行文件加载中链接到进程作为代码的一部分。 核心转储文件也是ELF的一种，作为进程意外终止时进程地址空间的转储。 一般.o为可重定位，ELF 为目标文件目标文件分为两种视角：一是链接视角，通过节来划分二是运行视角，通过段来划分 从链接视角，通常包含代码（.text）、数据（.data）和BSS（.bss）三个节代码节用于保存可执行的机器指令数据节用于保存已初始化的全局变量和局部静态变量BSS节用于保存未初始化的全局变量和局部静态变量目标文件还应包含一个文件头 ELF头魔术字符（7f 45 4c 46）即字符串“\\177ELF”节的信息保存在节头表，表的每个相都是Elf64_Ehdr结构体（节描述符）。节头表是非必须的，在文件头的e_shoff域中.rodata节保存只读数据，如调用printf()使用的”%d\\n”BSS节没有CONTENTS属性，在文件中并不存在，只是给变量预留了位置P22常见节 字符串表的第一个和最后一个字符都是NULL字符，引用字符时只要给出字符偏移即可 符号表记录了目标文件所用的所有符号信息。通常分为.dynsym和.symtab，后者是前者的子集，.dynsym保存了外部文件的符号，只能在运行时被解析，.symtab保存了本地符号用于调试和链接。目标文件通过符号的索引值使用这个符号，索引值从0开始计数，0没有含义表示未定义的符号。每个符号有符号值即为符号的地址。 重定位符是将节中的符号引用符号虚拟地址的过程，包含转换信息的数据就算重定位项","path":"2021/05/02/《CTF竞赛权威指南（PWN篇）整理一》/"},{"title":"记录用hexo+GitHub搭站的路程","text":"博客采用的是hexo+github搭建，主题选择的是cube（https://github.com/ZEROKISEKI/cube-generator) ，我感觉cube应该是比较好看的那种类型，究极选了好久才选择的主题，选择困难症患者就是在下了，一度换了好几个博客主题，都感觉不好，因为是第一次使用hexo，真的踩了好多坑，在这里记录一下。参考文件（https://blog.csdn.net/milletloks/article/details/104445557?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242） ，网上很多都大同小异，这里主要说说自己踩的坑和解决方法。 提前准备Github的库首先是要有自己的github，然后新建一个库，这个库的要求是要用自己github的name.github.io 1$ git@github.com:Melrose666/Merlrose666.github.io.git 这一段之后有用。 node.js和hexo的安装先下载node.js，然后通过 1$ npm -v 主要要查看npm有没有，这里我出现的问题是我有node的版本，但是npm却是无法识别的文件，解决方法是把nodejs卸了然后重新下载，然后nodejs里面有个环境要求要通过powershell下载所需要的环境，这边我遇到的问题是下了一半显示我网络错误，直接给我断了，后来通过科学方法解决了问题。hexo的下载就是简单的 1$ npm install hexo-cli -g 后面的差不多就算初始化，cd,再install一下就可以了。 Github+自己的域名这边的坑踩的太多了，而且花了很多天，一点点说。 自己域名我选择的是腾讯云，是必须要求实名的，这样dns才帮你解析。还有就是SSL证书一定要申请。 Githubgithub真的是大头，花了很长时间。首先是SSH Key在Git Bash 中生成id_pub.rsa的公钥之后，要在c盘documents中找到，把它复制下来，在 github的项目中（这时候你的github项目应该有东西了，可以先hexo d上传一下然后你会发现OPEN SSL_read，spawn failed），这些搜一下都有解决，但是一定要在你项目的settings里面找到deploy keys然后把你的公钥加进去，这边要选择allow write，要不然之后hexo d会没有权限。 CNAME特别的，要在你github的code中新建一个CNAME文件，将你的域名放进去，不要加www然后你找不到Custom domain。这里是要你在page中的source中的Branch选择master，然后custom domain就会出现，这边应该是你DNS解析记录添加过的，它应该会自动弹出你的域名，这边的域名根据你的记录填，大概率也是没有www,这时候上面会出现Your site is published at…然后如果你dns解析记录设置错了的话，你会发现custom domain你的域名一直在转圈，会出现both 你的域名都无法dns解析，下面的enforce https 也无法选择，这里就是DNS记录的问题了。 DNS记录管理这里我没有好好去看官方文档，光顾着去找一些博客，然后github的记录一直有问题GitHub给了四个记录值即185.199.1xx.153这边的主机记录要选择@，记录类型要选择A,还要有个www的cname指向你的name.github.io 12$ @ A 185.199.1xx.153$ www CNAME name.github.io 然后如果出现TLS 1/3什么的就说明已经好了，这个只要等12个小时就好了。这里基本上就好了，基本上hexo clean hexo g hexo d 就可以看自己的博客了。 美化live2d小人很可爱可以装一些插件这里可以参考一些其他的文章。 废话好好写博客从今天开始，至少一年要写一篇吧。。。","path":"2021/04/13/记录用hexo+GitHub搭站的路程/"}],"categories":[],"tags":[]}